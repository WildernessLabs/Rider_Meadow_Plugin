//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.13.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using JetBrains.Annotations;

using JetBrains.Core;
using JetBrains.Diagnostics;
using JetBrains.Collections;
using JetBrains.Collections.Viewable;
using JetBrains.Lifetimes;
using JetBrains.Serialization;
using JetBrains.Rd;
using JetBrains.Rd.Base;
using JetBrains.Rd.Impl;
using JetBrains.Rd.Tasks;
using JetBrains.Rd.Util;
using JetBrains.Rd.Text;


// ReSharper disable RedundantEmptyObjectCreationArgumentList
// ReSharper disable InconsistentNaming
// ReSharper disable RedundantOverflowCheckingContext


namespace Meadow.Generated
{
  
  
  /// <summary>
  /// <p>Generated from: MeadowPluginModel.kt:11</p>
  /// </summary>
  public class MeadowPluginModel : RdExtBase
  {
    //fields
    //public fields
    [NotNull] public IRdEndpoint<Unit, List<string>> GetSerialPorts => _GetSerialPorts;
    [NotNull] public IRdEndpoint<string, Unit> ResetDevice => _ResetDevice;
    
    //private fields
    [NotNull] private readonly RdCall<Unit, List<string>> _GetSerialPorts;
    [NotNull] private readonly RdCall<string, Unit> _ResetDevice;
    
    //primary constructor
    private MeadowPluginModel(
      [NotNull] RdCall<Unit, List<string>> getSerialPorts,
      [NotNull] RdCall<string, Unit> resetDevice
    )
    {
      if (getSerialPorts == null) throw new ArgumentNullException("getSerialPorts");
      if (resetDevice == null) throw new ArgumentNullException("resetDevice");
      
      _GetSerialPorts = getSerialPorts;
      _ResetDevice = resetDevice;
      _GetSerialPorts.Async = true;
      BindableChildren.Add(new KeyValuePair<string, object>("getSerialPorts", _GetSerialPorts));
      BindableChildren.Add(new KeyValuePair<string, object>("resetDevice", _ResetDevice));
    }
    //secondary constructor
    internal MeadowPluginModel (
    ) : this (
      new RdCall<Unit, List<string>>(JetBrains.Rd.Impl.Serializers.ReadVoid, JetBrains.Rd.Impl.Serializers.WriteVoid, ReadStringList, WriteStringList),
      new RdCall<string, Unit>(JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString, JetBrains.Rd.Impl.Serializers.ReadVoid, JetBrains.Rd.Impl.Serializers.WriteVoid)
    ) {}
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<List<string>> ReadStringList = JetBrains.Rd.Impl.Serializers.ReadString.List();
    
    public static  CtxWriteDelegate<List<string>> WriteStringList = JetBrains.Rd.Impl.Serializers.WriteString.List();
    
    protected override long SerializationHash => 5053242627264958697L;
    
    protected override Action<ISerializers> Register => RegisterDeclaredTypesSerializers;
    public static void RegisterDeclaredTypesSerializers(ISerializers serializers)
    {
      serializers.Register(MeadowDeploymentArgs.Read, MeadowDeploymentArgs.Write);
      serializers.Register(MeadowDeploymentResult.Read, MeadowDeploymentResult.Write);
      
      serializers.RegisterToplevelOnce(typeof(JetBrains.Rider.Model.IdeRoot), JetBrains.Rider.Model.IdeRoot.RegisterDeclaredTypesSerializers);
    }
    
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("MeadowPluginModel (");
      using (printer.IndentCookie()) {
        printer.Print("getSerialPorts = "); _GetSerialPorts.PrintEx(printer); printer.Println();
        printer.Print("resetDevice = "); _ResetDevice.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  public static class SolutionMeadowPluginModelEx
   {
    public static MeadowPluginModel GetMeadowPluginModel(this JetBrains.Rider.Model.Solution solution)
    {
      return solution.GetOrCreateExtension("meadowPluginModel", () => new MeadowPluginModel());
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: MeadowPluginModel.kt:13</p>
  /// </summary>
  public sealed class MeadowDeploymentArgs : JetBrains.Rider.Model.DeploymentArgsBase
  {
    //fields
    //public fields
    [NotNull] public string Port {get; private set;}
    [NotNull] public string AppPath {get; private set;}
    public bool Debug {get; private set;}
    
    //private fields
    //primary constructor
    public MeadowDeploymentArgs(
      [NotNull] string port,
      [NotNull] string appPath,
      bool debug,
      [NotNull] JetBrains.Rider.Model.RunnableProjectKind projectKind,
      [NotNull] string projectFilePath
    ) : base (
      projectKind,
      projectFilePath
     ) 
    {
      if (port == null) throw new ArgumentNullException("port");
      if (appPath == null) throw new ArgumentNullException("appPath");
      
      Port = port;
      AppPath = appPath;
      Debug = debug;
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<MeadowDeploymentArgs> Read = (ctx, reader) => 
    {
      var projectKind = JetBrains.Rider.Model.RunnableProjectKind.Read(ctx, reader);
      var projectFilePath = reader.ReadString();
      var port = reader.ReadString();
      var appPath = reader.ReadString();
      var debug = reader.ReadBool();
      var _result = new MeadowDeploymentArgs(port, appPath, debug, projectKind, projectFilePath);
      return _result;
    };
    
    public static new CtxWriteDelegate<MeadowDeploymentArgs> Write = (ctx, writer, value) => 
    {
      JetBrains.Rider.Model.RunnableProjectKind.Write(ctx, writer, value.ProjectKind);
      writer.Write(value.ProjectFilePath);
      writer.Write(value.Port);
      writer.Write(value.AppPath);
      writer.Write(value.Debug);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((MeadowDeploymentArgs) obj);
    }
    public bool Equals(MeadowDeploymentArgs other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Port == other.Port && AppPath == other.AppPath && Debug == other.Debug && Equals(ProjectKind, other.ProjectKind) && ProjectFilePath == other.ProjectFilePath;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Port.GetHashCode();
        hash = hash * 31 + AppPath.GetHashCode();
        hash = hash * 31 + Debug.GetHashCode();
        hash = hash * 31 + ProjectKind.GetHashCode();
        hash = hash * 31 + ProjectFilePath.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("MeadowDeploymentArgs (");
      using (printer.IndentCookie()) {
        printer.Print("port = "); Port.PrintEx(printer); printer.Println();
        printer.Print("appPath = "); AppPath.PrintEx(printer); printer.Println();
        printer.Print("debug = "); Debug.PrintEx(printer); printer.Println();
        printer.Print("projectKind = "); ProjectKind.PrintEx(printer); printer.Println();
        printer.Print("projectFilePath = "); ProjectFilePath.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: MeadowPluginModel.kt:19</p>
  /// </summary>
  public sealed class MeadowDeploymentResult : JetBrains.Rider.Model.DeploymentResultBase
  {
    //fields
    //public fields
    public int DebugPort {get; private set;}
    
    //private fields
    //primary constructor
    public MeadowDeploymentResult(
      int debugPort,
      JetBrains.Rider.Model.DeploymentResultStatus status
    ) : base (
      status
     ) 
    {
      DebugPort = debugPort;
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<MeadowDeploymentResult> Read = (ctx, reader) => 
    {
      var status = (JetBrains.Rider.Model.DeploymentResultStatus)reader.ReadInt();
      var debugPort = reader.ReadInt();
      var _result = new MeadowDeploymentResult(debugPort, status);
      return _result;
    };
    
    public static new CtxWriteDelegate<MeadowDeploymentResult> Write = (ctx, writer, value) => 
    {
      writer.Write((int)value.Status);
      writer.Write(value.DebugPort);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((MeadowDeploymentResult) obj);
    }
    public bool Equals(MeadowDeploymentResult other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return DebugPort == other.DebugPort && Status == other.Status;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + DebugPort.GetHashCode();
        hash = hash * 31 + (int) Status;
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("MeadowDeploymentResult (");
      using (printer.IndentCookie()) {
        printer.Print("debugPort = "); DebugPort.PrintEx(printer); printer.Println();
        printer.Print("status = "); Status.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
}
