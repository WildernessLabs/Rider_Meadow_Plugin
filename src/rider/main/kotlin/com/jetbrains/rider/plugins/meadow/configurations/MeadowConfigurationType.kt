package com.jetbrains.rider.plugins.meadow.configurations

import com.intellij.execution.RunManager
import com.intellij.execution.RunnerAndConfigurationSettings
import com.intellij.execution.configurations.ConfigurationTypeBase
import com.intellij.openapi.project.PossiblyDumbAware
import com.intellij.openapi.project.Project
import com.jetbrains.rd.util.lifetime.Lifetime
import com.jetbrains.rider.plugins.meadow.icons.Icons
import com.jetbrains.rider.plugins.meadow.messages.MeadowBundle
import com.jetbrains.rider.model.RunnableProject
import com.jetbrains.rider.model.RunnableProjectKind
import com.jetbrains.rider.run.AutoGeneratedRunConfigurationManager
import com.jetbrains.rider.run.configurations.IRunConfigurationWithDefault
import com.jetbrains.rider.run.configurations.IRunnableProjectConfigurationType
import com.jetbrains.rider.run.configurations.RunConfigurationHelper.hasConfigurationForNameAndTypeId

class MeadowConfigurationType : ConfigurationTypeBase(
    RUN_CONFIG_ID,
    MeadowBundle.message("meadow.os.message"),
    MeadowBundle.message("meadow.os.configuration.message"),
    Icons.Main),
    IRunnableProjectConfigurationType, IRunConfigurationWithDefault, PossiblyDumbAware {

    companion object {
        const val RUN_CONFIG_ID = "Meadow.OS"
    }

    private val factoryConfiguration: MeadowConfigurationFactory = MeadowConfigurationFactory(this)

    init {
        addFactory(factoryConfiguration)
    }

    override fun isApplicable(kind: RunnableProjectKind) = isTypeApplicable(kind)

    override fun isDumbAware() = true

    override val defaultConfigurationPriority: Int
        get() = 15

    override fun tryCreateDefault(
        project: Project,
        lifetime: Lifetime,
        projects: List<RunnableProject>,
        autoGeneratedRunConfigurationManager: AutoGeneratedRunConfigurationManager,
        runManager: RunManager
    ): List<Pair<RunnableProject, RunnerAndConfigurationSettings>> {
        val applicableProjects = projects.filter {
            isApplicable(it.kind)
                    && !runManager.hasConfigurationForNameAndTypeId(it.name, this.id)
                    && !autoGeneratedRunConfigurationManager.hasRunConfigurationEverBeenGenerated(it.projectFilePath, it.kind)
        }
        return applicableProjects.map {
            val runnerAndConfiguration = runManager.createConfiguration(it.name, MeadowConfigurationType::class.java)
            val configuration = runnerAndConfiguration.configuration as MeadowConfiguration
            configuration.parameters.projectFilePath = it.projectFilePath
            runManager.addConfiguration(runnerAndConfiguration)
            autoGeneratedRunConfigurationManager.markProjectAsAutoGenerated(it.projectFilePath, it.kind)
            it to runnerAndConfiguration
        }
    }
}

fun isTypeApplicable(kind: RunnableProjectKind) =
    kind == MEADOW_PROJECT_KIND

val MEADOW_PROJECT_KIND = RunnableProjectKind("Meadow")